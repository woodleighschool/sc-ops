set positional-arguments := true
set quiet := true
set shell := ['bash', '-euo', 'pipefail', '-c']

bootstrap_dir := justfile_dir() + '/bootstrap'
kubernetes_dir := justfile_dir() + '/kubernetes'
controller := `talosctl config info -o yaml | yq -e '.endpoints[0]'`
nodes := `talosctl config info -o yaml | yq -e '.nodes | join (" ")'`

[private]
default: talos kubernetes controller-kubeconfig wait namespaces resources mutating-admission-policy crds apps cilium-kubeconfig

[doc('Install Talos')]
talos:
    just log info "Running stage..." "stage" "$0"
    for n in {{ nodes }}; do \
        if ! op=$(just talos apply-node "$n" --insecure 2>&1); then \
            if [[ "$op" == *"certificate required"* ]]; then \
                just log info "Talos already configured, skipping apply of config" "stage" "$0" "node" "$n"; \
                continue; \
            fi; \
            just log fatal "Failed to apply Talos configuration" "stage" "$0" "node" "$n" "output" "$op"; \
        fi; \
    done

[doc('Install Kubernetes')]
kubernetes:
    just log info "Running stage..." "stage" "$0"
    until op=$(talosctl -n "{{ controller }}" bootstrap 2>&1 || true) && [[ "$op" == *"AlreadyExists"* ]]; do \
        just log info "Kubernetes bootstrap in progress. Retrying in 5 seconds..." "stage" "$0"; \
        sleep 5; \
    done

[doc('Fetch kubeconfig with the controller endpoint')]
controller-kubeconfig:
    just log info "Running stage..." "stage" "$0"
    if ! just talos gen-kubeconfig; then \
        just log fatal "Failed to fetch kubeconfig" "stage" "$0"; \
    fi
    if ! kubectl config set-cluster main --server "https://{{ controller }}:6443"; then \
        just log fatal "Failed to set kubectl cluster server address" "stage" "$0"; \
    fi

[doc('Wait for nodes to be not-ready')]
wait:
    just log info "Running stage..." "stage" "$0"
    if ! kubectl wait nodes --for=condition=Ready=True --all --timeout=10s &>/dev/null; then \
        until kubectl wait nodes --for=condition=Ready=False --all --timeout=10s &>/dev/null; do \
            just log info "Nodes not available, waiting for nodes to be available. Retrying in 5 seconds..." "stage" "$0"; \
            sleep 5; \
        done \
    fi

[doc('Apply Kubernetes namespaces')]
namespaces:
    just log info "Running stage..." "stage" "$0"
    just bootstrap verify-ca-bundle
    find "{{ kubernetes_dir }}/apps" -mindepth 1 -maxdepth 1 -type d -exec basename {} \; | while IFS= read -r ns; do \
        if ! kubectl create namespace "$ns" --dry-run=client -o yaml | kubectl apply --server-side -f -; then \
            just log fatal "Failed to apply namespace" "stage" "$0" "namespace" "$ns"; \
        fi; \
        if ! kubectl create configmap ca-trust-bundle --from-file=ca-bundle.crt="${CA_CERT_PATH}" -n "$ns" --dry-run=client -o yaml | kubectl apply --server-side -f -; then \
            just log fatal "Failed to create ca-trust-bundle ConfigMap in namespace" "stage" "$0" "namespace" "$ns"; \
        fi; \
    done

[doc('Apply Kubernetes resources including CA trust bundle')]
resources:
    just log info "Running stage..." "stage" "$0"
    @just log info "Generating resources with CA bundle..." "stage" "$0"
    if ! just template "{{ bootstrap_dir }}/resources.yaml.j2" | kubectl apply --server-side -f -; then \
        just log fatal "Failed to apply resources" "stage" "$0"; \
    fi

[doc('Apply inject-ca-certificates MutatingAdmissionPolicy')]
mutating-admission-policy:
    just log info "Running stage..." "stage" "$0"
    if ! kubectl apply --server-side -f "{{ bootstrap_dir }}/inject-ca-certificates.yaml"; then \
        just log fatal "Failed to apply inject-ca-certificates MutatingAdmissionPolicy" "stage" "$0"; \
    fi

[doc('Apply Helmfile CRDs')]
crds:
    just log info "Running stage..." "stage" "$0"
    if ! helmfile -f "{{ bootstrap_dir }}/helmfile.d/00-crds.yaml" template -q | kubectl apply --server-side -f -; then \
        just log fatal "Failed to apply crds" "stage" "$0"; \
    fi;

[doc('Apply Helmfile Apps')]
apps:
    just log info "Running stage..." "stage" "$0"
    if ! helmfile -f "{{ bootstrap_dir }}/helmfile.d/01-apps.yaml" sync --hide-notes; then \
        just log fatal "Failed to sync helmfile" "stage" "$0"; \
    fi

[doc('Fetch kubeconfig with the cilium endpoint')]
cilium-kubeconfig:
    just log info "Running stage..." "stage" "$0"
    if ! just talos gen-kubeconfig; then \
        just log fatal "Failed to fetch kubeconfig" "stage" "$0"; \
    fi

[private]
verify-ca-bundle:
    just log info "Verifying CA bundle..." "stage" "$0"
    @if ! openssl crl2pkcs7 -nocrl -certfile ${CA_CERT_PATH} \
        | openssl pkcs7 -print_certs -noout \
        | grep -Fq "CN=trust.woodleigh.vic.edu.au"; then \
        just log fatal "Woodleigh CA not found in brew certificate bundle" "stage" "$0"; \
    fi
    @just log info "âœ“ Woodleigh CA found in ${CA_CERT_PATH}" "stage" "$0"